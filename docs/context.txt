context - This is a context the script is run from, i.e. if a user called noob ran your script, then any command executed from context will be treated as executed by the user who executed it, just like he/she would write them in their command line. Context has the following subkeys:

    context.caller - The name of the user who is calling the script (i.e. n00b)

    context.this_script - The name of this script

    context.calling_script - The name of the script that directly called this script, or null if called on the command line

    context.cols - The number of columns in the caller's terminal, if reported by the client.

// arg1:val1, arg2:val2, arg3:#s.an.example, arg4:”example”

#D(ob) -- Debug Log

If #D is called in a script you own, the return value of the top level script is suppressed and instead an array of every #D’d entry is printed. This lets you use #D kind of like console.log. #D in scripts not owned by you are not shown. #D returns its argument unchanged, so you can do things like return #D(ob) to return the object when the caller isn’t you, and debug-log it when it is you (allowing you to “keep” your returns with other debug logs). #D’d items are returned even if the script times out or errors.
#FMCL -- Function Multi-Call Lock

#FMCL is what escrow.charge uses to ensure it is only called once per script execution. The first time (in each script) that #FMCL is encountered, it returns falsey, and every time thereafter it returns truthy. A common usage pattern is

if(#FMCL)
    return "error"
// do work

The first time that block of code is hit, it will do work, and every time after it will return the error (this applies even if (and specifically for the case where) your script is called multiple times in the same execution)

#G -- Global

#G is a per-script global object. It starts out blank, and you can add whatever properties you want to it. If your script is called multiple times in a single overall script run, its #G is persisted between those calls (but each script sees its own #G). This is useful to cache db lookups that won’t change in scripts that expect to be called many times. Sample usage:

if(!#G.my_db_entry)
    #G.my_db_entry=#db.f({whatever:true}).first();
// use #G.my_db_entry in code below

Special Script Variables
_START

This contains a JS timestamp (not Date) set immediately before your code begins running. You can see how much time remains by doing Date.now()-_START
_TIMEOUT
This contains the number of milliseconds a script is allowed to run for. Effectively always just 5000, except when a trust script is called on the command line and its value is, presumably, 8000.